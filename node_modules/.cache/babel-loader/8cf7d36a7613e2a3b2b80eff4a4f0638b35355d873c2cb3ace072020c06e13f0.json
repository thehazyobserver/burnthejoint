{"ast":null,"code":"/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  const {\n    endo,\n    Fp,\n    a\n  } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({\n    ...opts\n  });\n}\n// ASN.1 DER encoding utilities\nconst {\n  bytesToNumberBE: b2n,\n  hexToBytes: h2b\n} = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor() {\n      let m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      super(m);\n    }\n  },\n  _parseInt(data) {\n    const {\n      Err: E\n    } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000)) throw new E('Invalid signature integer: unnecessary leading zero');\n    return {\n      d: b2n(res),\n      l: data.subarray(len + 2)\n    }; // d is data, l is left\n  },\n  toSig(hex) {\n    // parse DER signature\n    const {\n      Err: E\n    } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const {\n      d: r,\n      l: sBytes\n    } = DER._parseInt(data.subarray(2));\n    const {\n      d: s,\n      l: rBytesLeft\n    } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return {\n      r,\n      s\n    };\n  },\n  hexFromSig(sig) {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = s => Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s;\n    const h = num => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n  const CURVE = validatePointOpts(opts);\n  const {\n    Fp\n  } = CURVE; // All curves has same field / group length as for now, but they can differ\n  const toBytes = CURVE.toBytes || ((_c, point, _isCompressed) => {\n    const a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  });\n  const fromBytes = CURVE.fromBytes || (bytes => {\n    // const head = bytes[0];\n    const tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x,\n      y\n    };\n  });\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    const {\n      a,\n      b\n    } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    const {\n      allowedPrivateKeyLengths: lengths,\n      nByteLength,\n      wrapPrivateKey,\n      n\n    } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n  const pointPrecomputes = new Map();\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point {\n    constructor(px, py, pz) {\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p) {\n      const {\n        x,\n        y\n      } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = i => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n    get x() {\n      return this.toAffine().x;\n    }\n    get y() {\n      return this.toAffine().y;\n    }\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points) {\n      const toInv = Fp.invertBatch(points.map(p => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex) {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n    // A point on curve is valid if it conforms to equation.\n    assertValidity() {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const {\n        x,\n        y\n      } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY() {\n      const {\n        y\n      } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n    /**\n     * Compare one point to another.\n     */\n    equals(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate() {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const {\n        a,\n        b\n      } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other) {\n      assertPrjPoint(other);\n      const {\n        px: X1,\n        py: Y1,\n        pz: Z1\n      } = this;\n      const {\n        px: X2,\n        py: Y2,\n        pz: Z2\n      } = other;\n      let X3 = Fp.ZERO,\n        Y3 = Fp.ZERO,\n        Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n    subtract(other) {\n      return this.add(other.negate());\n    }\n    is0() {\n      return this.equals(Point.ZERO);\n    }\n    wNAF(n) {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, comp => {\n        const toInv = Fp.invertBatch(comp.map(p => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n) {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const {\n        endo\n      } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n      // Apply endomorphism\n      let {\n        k1neg,\n        k1,\n        k2neg,\n        k2\n      } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar) {\n      assertGE(scalar);\n      let n = scalar;\n      let point, fake; // Fake point is used to const-time mult\n      const {\n        endo\n      } = CURVE;\n      if (endo) {\n        const {\n          k1neg,\n          k1,\n          k2neg,\n          k2\n        } = endo.splitScalar(n);\n        let {\n          p: k1p,\n          f: f1p\n        } = this.wNAF(k1);\n        let {\n          p: k2p,\n          f: f2p\n        } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const {\n          p,\n          f\n        } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q, a, b) {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (P, a // Select faster multiply() method\n      ) => a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz) {\n      const {\n        px: x,\n        py: y,\n        pz: z\n      } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return {\n        x: Fp.ZERO,\n        y: Fp.ZERO\n      };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return {\n        x: ax,\n        y: ay\n      };\n    }\n    isTorsionFree() {\n      const {\n        h: cofactor,\n        isTorsionFree\n      } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor() {\n      const {\n        h: cofactor,\n        clearCofactor\n      } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this);\n      return this.multiplyUnsafe(CURVE.h);\n    }\n    toRawBytes() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n    toHex() {\n      let isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  };\n}\nfunction validateOpts(curve) {\n  const opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze({\n    lowS: true,\n    ...opts\n  });\n}\nexport function weierstrass(curveDef) {\n  const CURVE = validateOpts(curveDef);\n  const {\n    Fp,\n    n: CURVE_ORDER\n  } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function isValidFieldElement(num) {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed) {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return {\n          x,\n          y\n        };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return {\n          x,\n          y\n        };\n      } else {\n        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);\n      }\n    }\n  });\n  const numToNByteStr = num => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  function isBiggerThanHalfOrder(number) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b, from, to) => ut.bytesToNumberBE(b.slice(from, to));\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature {\n    constructor(r, s, recovery) {\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex) {\n      const {\n        r,\n        s\n      } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n    assertValidity() {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n    addRecoveryBit(recovery) {\n      return new Signature(this.r, this.s, recovery);\n    }\n    recoverPublicKey(msgHash) {\n      const {\n        r,\n        s,\n        recovery: rec\n      } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS() {\n      return isBiggerThanHalfOrder(this.s);\n    }\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({\n        r: this.r,\n        s: this.s\n      });\n    }\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  const utils = {\n    isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: () => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute() {\n      let windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      let point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey) {\n    let isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB) {\n    let isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int = CURVE.bits2int || function (bytes) {\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  const bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK)) throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    if (['recovered', 'canonical'].some(k => k in opts)) throw new Error('sign() legacy options not supported');\n    const {\n      hash,\n      randomBytes\n    } = CURVE;\n    let {\n      lowS,\n      prehash,\n      extraEntropy: ent\n    } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n    return {\n      seed,\n      k2sig\n    };\n  }\n  const defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  const defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey) {\n    let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    const {\n      seed,\n      k2sig\n    } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey) {\n    let opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const {\n      lowS,\n      prehash\n    } = opts;\n    let _sig = undefined;\n    let P;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const {\n          r,\n          s\n        } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if (error.message === 'PARSE') throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const {\n      r,\n      s\n    } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils\n  };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u, v) => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << tv5 - _1n; // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u, v) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return u => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const {\n      isValid,\n      value\n    } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x,\n      y\n    };\n  };\n}","map":{"version":3,"names":["mod","ut","ensureBytes","wNAF","validateBasic","validatePointOpts","curve","opts","validateObject","a","b","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","Fp","eql","ZERO","Error","beta","splitScalar","Object","freeze","bytesToNumberBE","b2n","hexToBytes","h2b","DER","Err","DERErr","constructor","m","arguments","length","undefined","_parseInt","data","E","len","res","subarray","d","l","toSig","hex","Uint8Array","r","sBytes","s","rBytesLeft","hexFromSig","sig","slice","Number","parseInt","h","num","toString","shl","rhl","sl","rl","_0n","BigInt","_1n","_2n","_3n","_4n","weierstrassPoints","CURVE","_c","point","_isCompressed","toAffine","concatBytes","from","x","y","bytes","tail","BYTES","weierstrassEquation","x2","sqr","x3","mul","add","Gy","Gx","isWithinCurveOrder","n","assertGE","normPrivateKeyToScalar","key","lengths","nByteLength","bytesToHex","includes","padStart","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","fromAffine","p","is0","i","ONE","normalizeZ","points","toInv","invertBatch","map","fromHex","P","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","neg","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","Q","G","sum","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","nBitLength","Math","ceil","ProjectivePoint","validateOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","lowS","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","ORDER","modN","invN","invert","cat","head","y2","sqrt","isYOdd","isHeadOdd","numToNByteStr","numberToBytesBE","isBiggerThanHalfOrder","number","HALF","normalizeS","slcNum","to","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","getMinHashLength","mapHashToField","precompute","getPublicKey","isProbPub","item","arr","str","getSharedSecret","privateA","publicB","delta","ORDER_MASK","bitMask","int2octets","prepSig","defaultSigOpts","some","k","prehash","extraEntropy","ent","h1int","seedArgs","e","push","seed","k2sig","kBytes","ik","q","normS","defaultVerOpts","sign","privKey","C","drbg","createHmacDrbg","outputLen","verify","signature","publicKey","sg","_sig","derError","message","is","v","SWUFpSqrtRatio","Z","o","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","pow","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","value","y1","mapToCurveSimpleSWU","validateField","A","B","tv6","div"],"sources":["C:\\Users\\deanw\\OneDrive\\Desktop\\GitHub\\burnthejoint\\node_modules\\@noble\\curves\\src\\abstract\\weierstrass.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}